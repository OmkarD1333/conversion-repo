#include<stdio.h> 

struct process { 
    int allocation[3]; 
    int max[3]; 
    int need[3]; 
    int finish; 
} p[10]; 

int main() {
    int n, i, j, avail[3], work[3], flag, count = 0, sequence[10], k = 0; 

    printf("\nEnter the number of processes: ");
    scanf("%d", &n); 

    for(i = 0; i < n; i++) { 
        printf("\nEnter the %dth process allocated resources: ", i + 1); 
        scanf("%d%d%d", &p[i].allocation[0], &p[i].allocation[1], &p[i].allocation[2]); 

        printf("\nEnter the %dth process maximum resources: ", i + 1); 
        scanf("%d%d%d", &p[i].max[0], &p[i].max[1], &p[i].max[2]); 

        p[i].finish = 0; 
        p[i].need[0] = p[i].max[0] - p[i].allocation[0]; 
        p[i].need[1] = p[i].max[1] - p[i].allocation[1]; 
        p[i].need[2] = p[i].max[2] - p[i].allocation[2]; 
    } 

    printf("\nEnter the available vector: "); 
    scanf("%d%d%d", &avail[0], &avail[1], &avail[2]); 

    for(i = 0; i < 3; i++) 
        work[i] = avail[i]; 

    while(count != n) { 
        flag = 1; 
        for(i = 0; i < n; i++) { 
            if(p[i].finish == 0) { 
                if(p[i].need[0] <= work[0] && p[i].need[1] <= work[1] && p[i].need[2] <= work[2]) { 
                    for(j = 0; j < 3; j++) 
                        work[j] += p[i].allocation[j]; 

                    p[i].finish = 1; 
                    sequence[k++] = i; 
                    flag = 0; 
                } 
            } 
        } 

        if(flag == 1) { 
            printf("\nSYSTEM IS NOT IN A SAFE STATE\n");
            return 0; 
        } 
    } 

    printf("\nThe safe sequence is: "); 
    for(i = 0; i < k; i++) 
        printf("P%d ", sequence[i] + 1); 

    printf("\n"); 
    return 0;
}
